// tutorial schema

model TutorialCategory {
  id        String                       @id @default(cuid())
  name      String                       @unique
  slug      String                       @unique
  published Boolean                      @default(false)
  tutorials TutorialCategoryOnTutorial[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TutorialCategoryOnTutorial {
  tutorial   Tutorial @relation(fields: [tutorialId], references: [id], onDelete: Cascade)
  tutorialId String

  category   TutorialCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String

  assignedAt DateTime @default(now())

  @@id([tutorialId, categoryId]) // composite primary key
  @@index([tutorialId, categoryId])
}

model Tutorial {
  id          String                       @id @default(cuid())
  title       String
  slug        String                       @unique
  description String
  published   Boolean                      @default(false)
  chapters    Chapter[]
  categories  TutorialCategoryOnTutorial[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// This is the join table for many-to-many

model Chapter {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique // Unique slug (optional)
  description String?
  tutorial    Tutorial @relation(fields: [tutorialId], references: [id], onDelete: Cascade)
  tutorialId  String
  topics      Topic[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("chapters")
}

model Topic {
  id        String  @id @default(cuid())
  title     String
  slug      String  @unique
  content   String
  order     Int
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("topics")
}

// blogs schema

enum ReactionType {
  LIKE
  DISLIKE
}

model Blog {
  id          String       @id @default(cuid())
  title       String
  slug        String       @unique // SEO-friendly URL
  description String
  content     String
  category    BlogCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId  String
  authorName  String
  published   Boolean      @default(false)
  coverImage  String

  reactions BlogReaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("blogs")
}

model BlogReaction {
  id        String       @id @default(cuid())
  user      Profile      @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String
  blog      Blog         @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId    String
  type      ReactionType // Enum for LIKE or DISLIKE

  createdAt DateTime @default(now())

  @@unique([profileId, blogId]) // Ensures one reaction per user per blog
}

model BlogCategory {
  id        String  @id @default(cuid())
  name      String  @unique
  slug      String  @unique
  published Boolean @default(false)
  blogs     Blog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}
