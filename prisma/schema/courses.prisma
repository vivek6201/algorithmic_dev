// tutorial schema
model Tutorial {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique // Unique slug for URL navigation
  description String
  chapters    Chapter[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chapter {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique // Unique slug (optional)
  description String?
  tutorial    Tutorial @relation(fields: [tutorialId], references: [id], onDelete: Cascade)
  tutorialId  String
  topics      Topic[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("chapters")
}

model Topic {
  id        String  @id @default(cuid())
  title     String
  slug      String  @unique // Unique slug for URL navigation
  content   String // Stores content (Markdown, JSON for Tiptap, etc.)
  order     Int // Determines topic order within a tutorial
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("topics")
}

// blogs schema

enum ReactionType {
  LIKE
  DISLIKE
}

model Blog {
  id         String       @id @default(cuid())
  title      String
  slug       String       @unique // SEO-friendly URL
  content    String // Stores blog content (Markdown, JSON for Tiptap, etc.)
  category   BlogCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String
  authorName String // Stores author's name as a string
  published  Boolean      @default(false) // Only Admins can publish

  reactions BlogReaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("blogs")
}

model BlogReaction {
  id        String       @id @default(cuid())
  user      Profile      @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String
  blog      Blog         @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId    String
  type      ReactionType // Enum for LIKE or DISLIKE

  createdAt DateTime @default(now())

  @@unique([profileId, blogId]) // Ensures one reaction per user per blog
}

model BlogCategory {
  id    String @id @default(cuid())
  name  String @unique
  slug  String @unique // SEO-friendly URL
  blogs Blog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}
