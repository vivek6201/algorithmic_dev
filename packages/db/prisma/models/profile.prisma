model Profile {
  id          String  @id @default(cuid())
  image       String
  phoneNumber String?
  bio         String

  address Address?

  urls        Json?
  resumeUrl   String?
  skills      String[]
  languages   String[]
  dateOfBirth DateTime
  hobbies     String[]
  personType  PersonType?

  blogReaction BlogReaction[] // Reactions for blogs

  // Relationship with user
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  // Relationships for different profile details
  educationDetails  Education[]
  experienceDetails Experience[]
  projects          Project[]
  Bookmarks         Bookmark[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Enum to define the type of person
enum PersonType {
  SCHOOL_STUDENT
  WORKING_PROFESSIONAL
  SELF_EMPLOYED
  OTHER
}

model Address {
  id String @id @default(cuid())

  city      String
  state     String
  country   String
  pincode   String
  Profile   Profile? @relation(fields: [profileId], references: [id])
  profileId String?  @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Education details
model Education {
  id                String    @id @default(cuid())
  profileId         String
  profile           Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  schoolName        String
  degree            String
  fieldOfStudy      String
  startDate         DateTime
  endDate           DateTime?
  grade             String?
  currentlyEnrolled Boolean   @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Work experience details
model Experience {
  id               String    @id @default(cuid())
  profileId        String
  profile          Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  companyName      String
  jobTitle         String
  startDate        DateTime
  endDate          DateTime?
  currentlyWorking Boolean   @default(false)
  jobDescription   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Projects
model Project {
  id          String    @id @default(cuid())
  projectName String
  description String
  startDate   DateTime
  endDate     DateTime?
  inProgress  Boolean   @default(false)
  projectLink String?
  githubLink  String?

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum BookmarkType {
  Jobs
  Blogs
}

model Bookmark {
  id        String       @id @default(cuid())
  type      BookmarkType
  profileId String
  profile   Profile      @relation(fields: [profileId], references: [id], onDelete: Cascade)

  // Optional relations (only one will be non-null per record)
  jobId String?
  job   Jobs?   @relation(name: "JobBookmarks", fields: [jobId], references: [id], onDelete: Cascade)

  blogId String?
  blog   Blog?   @relation(name: "BlogBookmarks", fields: [blogId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Composite unique constraints to prevent duplicates
  @@unique([profileId, jobId], name: "profileId_jobId")
  @@unique([profileId, blogId], name: "profileId_blogId")
  @@index([jobId])
  @@index([blogId])
}

model EmployerProfile {
  id     String @id @default(cuid())
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Resources {
  id String @id @default(cuid())
}
